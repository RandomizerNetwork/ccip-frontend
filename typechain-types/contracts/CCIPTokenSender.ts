/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Client {
  export type EVMTokenAmountStruct = {
    token: AddressLike;
    amount: BigNumberish;
  };

  export type EVMTokenAmountStructOutput = [token: string, amount: bigint] & {
    token: string;
    amount: bigint;
  };

  export type EVM2AnyMessageStruct = {
    receiver: BytesLike;
    data: BytesLike;
    tokenAmounts: Client.EVMTokenAmountStruct[];
    feeToken: AddressLike;
    extraArgs: BytesLike;
  };

  export type EVM2AnyMessageStructOutput = [
    receiver: string,
    data: string,
    tokenAmounts: Client.EVMTokenAmountStructOutput[],
    feeToken: string,
    extraArgs: string
  ] & {
    receiver: string;
    data: string;
    tokenAmounts: Client.EVMTokenAmountStructOutput[];
    feeToken: string;
    extraArgs: string;
  };
}

export interface CCIPTokenSenderInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ccipRouter"
      | "ccipSend"
      | "ccipWhitelistedToken"
      | "getFee"
      | "getSupportedTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ccipRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ccipSend",
    values: [BigNumberish, Client.EVM2AnyMessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "ccipWhitelistedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFee",
    values: [BigNumberish, Client.EVM2AnyMessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedTokens",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ccipRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ccipSend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ccipWhitelistedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedTokens",
    data: BytesLike
  ): Result;
}

export interface CCIPTokenSender extends BaseContract {
  connect(runner?: ContractRunner | null): CCIPTokenSender;
  waitForDeployment(): Promise<this>;

  interface: CCIPTokenSenderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ccipRouter: TypedContractMethod<[], [string], "view">;

  ccipSend: TypedContractMethod<
    [
      destinationChainSelector: BigNumberish,
      message: Client.EVM2AnyMessageStruct
    ],
    [string],
    "payable"
  >;

  ccipWhitelistedToken: TypedContractMethod<[], [string], "view">;

  getFee: TypedContractMethod<
    [
      destinationChainSelector: BigNumberish,
      message: Client.EVM2AnyMessageStruct
    ],
    [bigint],
    "view"
  >;

  getSupportedTokens: TypedContractMethod<
    [destinationChainSelector: BigNumberish],
    [string[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ccipRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ccipSend"
  ): TypedContractMethod<
    [
      destinationChainSelector: BigNumberish,
      message: Client.EVM2AnyMessageStruct
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "ccipWhitelistedToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getFee"
  ): TypedContractMethod<
    [
      destinationChainSelector: BigNumberish,
      message: Client.EVM2AnyMessageStruct
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSupportedTokens"
  ): TypedContractMethod<
    [destinationChainSelector: BigNumberish],
    [string[]],
    "view"
  >;

  filters: {};
}
